package com.example;

import org.junit.jupiter.api.Test;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.testcontainers.containers.localstack.LocalStackContainer;
import org.testcontainers.utility.DockerImageName;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;

import static org.junit.jupiter.api.Assertions.*;

@Testcontainers
public class S3UploaderTest {

    @Container
    public static LocalStackContainer localstack = new LocalStackContainer(
            DockerImageName.parse("localstack/localstack:3.3.0"))
            .withServices(LocalStackContainer.Service.S3);

    @Test
    void testS3Upload() throws Exception {
        String region = localstack.getRegion();
        String endpoint = localstack.getEndpointOverride(LocalStackContainer.Service.S3).toString();
        String accessKey = localstack.getAccessKey();
        String secretKey = localstack.getSecretKey();
        String bucketName = "test-bucket";
        String key = "test.txt";

        // ダミーファイル作成
        File dummyFile = File.createTempFile("test-upload-", ".txt");
        String fileContent = "Hello from test!";
        try (FileWriter writer = new FileWriter(dummyFile)) {
            writer.write(fileContent);
        }

        File downloaded = null;
        // S3クライアント作成 - try-with-resources を使用してリソースの確実な解放
        try (AutoCloseableS3Client s3Client = new AutoCloseableS3Client(endpoint, region, accessKey, secretKey)) {
            AmazonS3 s3 = s3Client.getS3Client();

            // バケット作成
            s3.createBucket(bucketName);

            // ファイルアップロード
            s3.putObject(bucketName, key, dummyFile);

            // S3からダウンロードして内容検証
            downloaded = File.createTempFile("downloaded-", ".txt");
            try (InputStream in = s3.getObject(bucketName, key).getObjectContent();
                 OutputStream out = Files.newOutputStream(downloaded.toPath())) {
                byte[] buffer = new byte[8192];
                int len;
                while ((len = in.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }
            }
            String downloadedContent = new String(Files.readAllBytes(downloaded.toPath()), StandardCharsets.UTF_8);
            assertEquals(fileContent, downloadedContent);
        } finally {
            // クリーンアップ
            safeDeleteFile(dummyFile);
            safeDeleteFile(downloaded);
        }
    }
    
    // ファイルの安全な削除のためのヘルパーメソッド
    private void safeDeleteFile(File file) {
        if (file != null && file.exists()) {
            file.delete();
        }
    }
    
    // S3クライアントのためのAutoCloseable実装
    private static class AutoCloseableS3Client implements AutoCloseable {
        private final AmazonS3 s3Client;
        
        public AutoCloseableS3Client(String endpoint, String region, String accessKey, String secretKey) {
            this.s3Client = AmazonS3ClientBuilder.standard()
                    .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(endpoint, region))
                    .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials(accessKey, secretKey)))
                    .withPathStyleAccessEnabled(true)
                    .build();
        }
        
        public AmazonS3 getS3Client() {
            return s3Client;
        }
        
        @Override
        public void close() throws IOException {
            if (s3Client != null) {
                s3Client.shutdown();
            }
        }
    }
}
